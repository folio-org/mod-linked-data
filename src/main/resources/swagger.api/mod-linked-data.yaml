openapi: 3.0.0
info:
  title: Linked Data API
  version: v1
  description: Linked Data service API

paths:
  /linked-data/reindex:
    put:
      operationId: reindex
      tags:
        - reindex
      description: Start the process of reindexing of resources in the database
      parameters:
        - $ref: '#/components/parameters/full'
      responses:
        '204':
          description: Started the process of reindex
        '400':
          $ref: '#/components/responses/badRequestResponse'
        '500':
          $ref: '#/components/responses/internalServerErrorResponse'

  /linked-data/resource:
    post:
      operationId: createResource
      tags:
        - resource
      description: Create a Resource
      requestBody:
        content:
          application/json:
            schema:
              $ref: schema/resourceRequestDto.json
      responses:
        '200':
          description: Created resource
          content:
            application/json:
              schema:
                $ref: schema/resourceResponseDto.json
        '400':
          $ref: '#/components/responses/badRequestResponse'
        '500':
          $ref: '#/components/responses/internalServerErrorResponse'

  /linked-data/resource/{id}:
    get:
      operationId: getResourceById
      tags:
        - resource
      description: Get a resource by id
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Resource as json string
          content:
            application/json:
              schema:
                $ref: schema/resourceResponseDto.json
        '400':
          $ref: '#/components/responses/badRequestResponse'
        '404':
          description: No Resource is found by id
        '500':
          $ref: '#/components/responses/internalServerErrorResponse'
    put:
      operationId: updateResource
      tags:
        - resource
      description: Update a resource by id
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            example: example/resourceRequest.sample
            schema:
              $ref: schema/resourceRequestDto.json
      responses:
        '200':
          description: Updated resource
          content:
            application/json:
              schema:
                $ref: schema/resourceResponseDto.json
        '400':
          $ref: '#/components/responses/badRequestResponse'
        '404':
          description: No resource is found by id
        '500':
          $ref: '#/components/responses/internalServerErrorResponse'
    delete:
      operationId: deleteResource
      tags:
        - resource
      description: Delete a resource by id
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '204':
          description: Resource deleted
        '404':
          description: No resource is found by id
        '500':
          $ref: '#/components/responses/internalServerErrorResponse'

  /linked-data/resource/{id}/marc:
    get:
      operationId: getResourceMarcViewById
      tags:
        - resource
      description: Get a marc view of resource by id
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Marc view of resource as json string
          content:
            application/json:
              schema:
                $ref: schema/resourceMarcViewDto.json
        '400':
          $ref: '#/components/responses/badRequestResponse'
        '404':
          description: No Resource is found by id
        '500':
          $ref: '#/components/responses/internalServerErrorResponse'

  /linked-data/resource/{id}/rdf:
    get:
      operationId: exportInstanceToRdf
      tags:
        - resource
      description: Export Instance resource to RDF by id
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Exported RDF resource as json string
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Resource is found by id but it is not an Instance
        '404':
          description: No Instance is found by id
        '500':
          $ref: '#/components/responses/internalServerErrorResponse'

  /linked-data/resource/metadata/{inventoryId}/id:
    get:
      operationId: getResourceIdByResourceInventoryId
      tags:
        - resource
      description: Get id of a resource by its inventory id
      parameters:
        - $ref: '#/components/parameters/inventoryId'
      responses:
        '200':
          description: Json object with id of a resource
          content:
            application/json:
              schema:
                $ref: schema/resourceIdDto.json
        '404':
          description: No resource id is found by its inventory id

  /linked-data/resources/search:
    post:
      operationId: searchResources
      tags:
        - resource
      description: Get resources by their inventory ids
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "schema/searchResourcesRequestDto.json"
      responses:
        '200':
          description: The response is an array of Resources
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  format: Resource
                uniqueItems: true
                description: Array of Resources.

  /linked-data/inventory-instance/{inventoryId}/import-supported:
    get:
      operationId: checkMarcBibImportableToGraph
      tags:
        - resource
      description: Check if marc bibliographic record can be imported into linked data graph.
      parameters:
        - $ref: '#/components/parameters/inventoryId'
      responses:
        '200':
          description: true if marc bibliographic record can be imported into linked data graph, false otherwise.
          content:
            text/plain:
              schema:
                type: string
                example: true|false
        '404':
          description: No Record is found by inventory id
        '500':
          $ref: '#/components/responses/internalServerErrorResponse'

  /linked-data/inventory-instance/{inventoryId}/preview:
    get:
      operationId: getResourcePreviewByInventoryId
      tags:
        - resource
      description: Get the preview of a resource
      parameters:
        - $ref: '#/components/parameters/inventoryId'
      responses:
        '200':
          description: Resource as json string
          content:
            application/json:
              schema:
                $ref: schema/resourceResponseDto.json
        '404':
          description: No Record is found by inventory id
        '500':
          $ref: '#/components/responses/internalServerErrorResponse'

  /linked-data/inventory-instance/{inventoryId}/import:
    post:
      operationId: importMarcRecord
      tags:
        - resource
      description: Create a Resource derived from MARC record
      parameters:
        - $ref: '#/components/parameters/inventoryId'
        - $ref: '#/components/parameters/profileIdQuery'
      responses:
        '201':
          description: Json object with id of a resource
          content:
            application/json:
              schema:
                $ref: schema/resourceIdDto.json
        '400':
          $ref: '#/components/responses/badRequestResponse'
        '404':
          description: No Record is found by inventory id
        '500':
          $ref: '#/components/responses/internalServerErrorResponse'

  /linked-data/profile/{profileId}:
    get:
      operationId: getProfileById
      tags:
        - profile
      description: Get a profile by profileId
      parameters:
        - $ref: '#/components/parameters/profileId'
      responses:
        '200':
          description: Profile with a given profileId
          content:
            text/plain;charset=utf-8:
              schema:
                type: string
                example: example/profile.sample
        '404':
          description: No profile is found with a given profileId
        '500':
          $ref: '#/components/responses/internalServerErrorResponse'

  /linked-data/profile/metadata:
    get:
      operationId: getProfileMetadataByResourceType
      tags:
        - profile
      description: Get profiles metadata for a resource type
      parameters:
        - name: resourceType
          in: query
          required: true
          description: The type of resource for which metadata are requested
          schema:
            type: string
      responses:
        '200':
          description: Array of profile metadata for the specified resource type
          content:
            application/json:
              schema:
                $ref: "schema/profile/profileMetadataArray.json"
        '400':
          $ref: '#/components/responses/badRequestResponse'
        '500':
          $ref: '#/components/responses/internalServerErrorResponse'

  /linked-data/profile/preferred:
    get:
      operationId: getPreferredProfileByResourceType
      tags:
        - profile
      description: Get the preferred profile for a resource type for the current user
      parameters:
        - name: resourceType
          in: query
          required: false
          description: The type of resource for which preferred profile is requested. If not specified, profiles for all resource types will be returned
          schema:
            type: string
      responses:
        '200':
          description: Preferred profile(s) for the current user and specified resource type
          content:
            application/json:
              schema:
                $ref: "schema/profile/profileMetadataArray.json"

    post:
      operationId: setPreferredProfile
      tags:
        - profile
      description: Create or update the preferred profile for a resource type for the current user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "schema/profile/preferredProfileRequest.json"
      responses:
        '204':
          description: Preferred profile created or updated successfully
        '400':
          $ref: '#/components/responses/badRequestResponse'
        '500':
          $ref: '#/components/responses/internalServerErrorResponse'

    delete:
      operationId: deletePreferredProfile
      tags:
        - profile
      description: Delete preferred profile for current user
      parameters:
        - name: resourceType
          in: query
          required: true
          description: The type of resource for which preferred profile has to be deleted.
          schema:
            type: string
      responses:
        '204':
          description: Preferred profile deleted successfully
        '400':
          $ref: '#/components/responses/badRequestResponse'
        '500':
          $ref: '#/components/responses/internalServerErrorResponse'
  /linked-data/resource/{id}/graph:
    get:
      operationId: getResourceGraphById
      tags:
        - graph
      description: Get a resource graph by id
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Resource graph as json string
          content:
            application/json:
              schema:
                $ref: schema/graphDto/resourceGraphDto.json
        '400':
          $ref: '#/components/responses/badRequestResponse'
        '404':
          description: No Resource graph is found by id
        '500':
          $ref: '#/components/responses/internalServerErrorResponse'

  /linked-data/authority-assignment-check:
    post:
      operationId: authority-assignment-check
      tags:
        - authority
      description: Checks if authority can be assigned to work
      requestBody:
        content:
          application/json:
            schema:
              $ref: schema/assignmentCheckDto.json
      responses:
        '200':
          description: Returns the result of the assignment check, including whether the assignment is valid and, if not, the reason for invalidity
          content:
            application/json:
              schema:
                $ref: schema/assignmentCheckResponseDto.json
        '400':
          $ref: '#/components/responses/badRequestResponse'
        '500':
          $ref: '#/components/responses/internalServerErrorResponse'

  /linked-data/import/file:
    post:
      operationId: import-file
      tags:
        - import
      description: Imports an uploaded JSON file containing at least one resource
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fileName:
                  type: string
                  format: binary
      responses:
        '200':
          description: Returns a list of resource IDs and an import activity log
          content:
            application/json:
              schema:
                $ref: schema/importFileResponseDto.json
        '400':
          $ref: '#/components/responses/badRequestResponse'
        '500':
          $ref: '#/components/responses/internalServerErrorResponse'

components:
  parameters:
    id:
      name: id
      in: path
      required: true
      description: Linked Data resource id
      schema:
        type: integer
        format: int64
    inventoryId:
      name: inventoryId
      in: path
      required: true
      description: Inventory ID (999 $i) of the MARC record in SRS
      schema:
        type: string
    full:
      name: full
      in: query
      required: false
      description: Reindex all records if true, otherwise only not indexed
      schema:
        type: boolean
    profileId:
      name: profileId
      in: path
      required: true
      description: ID of the profile
      schema:
        type: integer
        format: int16
    profileIdQuery:
      name: profileId
      in: query
      required: false
      description: ID of the profile
      schema:
        type: integer
        format: int16
  schemas:
    errorResponse:
      $ref: schema/error/errors.json

  responses:
    badRequestResponse:
      description: Validation errors
      content:
        application/json:
          example: examples/validationErrorResponse.sample
          schema:
            $ref: "#/components/schemas/errorResponse"
    internalServerErrorResponse:
      description: When unhandled exception occurred during code execution, e.g. NullPointerException
      content:
        application/json:
          example: example/unknownError.sample
          schema:
            $ref: "#/components/schemas/errorResponse"
